@page "/Hotel-Room"
@using Models
@using Business.Repository.IRepository
@inject IHotelRoomRepository HotelRoomRepository
@inject IJSRuntime JsRuntime
@inject HiddenVilla_Server.Service.IService.IFileUpload FileUpload
@inject NavigationManager NavigationManager

<div class="row mt-4">
	<div class="col-8">
		<h4 class="card-title text-info">Hotel Rooms</h4>
	</div>
	<div class="col-3 offset-1">
		<NavLink href="Hotel-Room/Create" class="btn btn-info form-control">Add New Room</NavLink>
	</div>
</div>

<div class="row mt-4">
	<div class="col-12">
		<table class="table table-bordered table-hover">
			<thead>
				<tr>
					<th>Name</th>
					<th>Occupancy</th>
					<th>Rate</th>
					<th>Square Feet</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@if(HotelRooms.Any())
				{
					foreach(var room in HotelRooms)
					{
						<tr>
							<td>@room.Name</td>
							<td>@room.Occupancy</td>
							<td>@room.RegularRate.ToString("c")</td>
							<td>@room.SqFt</td>
							<td>
								<NavLink href="@($"Hotel-Room/Edit/{room.Id}")" class="btn btn-primary">Edit</NavLink>
								<button class="btn btn-danger" @onclick="()=>HandleDelete(room.Id)">Delete</button>
							</td>
						</tr>
					}
				}
				else
				{
					<tr>
						<td colspan="5">No records found</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>

<DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>

@code {
	private IEnumerable<HotelRoomDTO> HotelRooms { get; set; } = new List<HotelRoomDTO>();
	private int? DeleteRoomID { get; set; } = null;
	private bool IsProcessing { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		HotelRooms = await HotelRoomRepository.GetAllHotelRooms();
	}

	private async Task HandleDelete(int roomId)
	{
		DeleteRoomID = roomId;
		await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
	}

	public async Task ConfirmDelete_Click(bool isConfirmed)
	{
		IsProcessing = true;

		if(isConfirmed && DeleteRoomID != null)
		{
			HotelRoomDTO hotelRoom = await HotelRoomRepository.GetHotelRoom(DeleteRoomID.Value);
			foreach(var image in hotelRoom.HotelRoomImages)
			{
				var imageName = image.RoomImageUrl.Replace($"{NavigationManager.BaseUri}RoomImages/", "");

				FileUpload.DeleteFile(imageName);
			}

			await HotelRoomRepository.DeleteHotelRoom(DeleteRoomID.Value);
			await JsRuntime.ToastrSuccess("Hotel Room Deleted successfully");
			HotelRooms = await HotelRoomRepository.GetAllHotelRooms();
		}
		await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
		IsProcessing = false;
	}
}
